search product in products page using livewire
edit product modal
view order and accepts / reject
avatar upload
loader and stopping on activating / deactivating product
toast notifications
store current location

---things that can be updated later in store    
    name, phone, description, 

public function index()
    {
        $pageTitle = 'Products';  // Set the page title for this view
        $userStoreCheck = $this->checkUserStore();
        // $categories = ProductCategory::pluck('category');
        $categories = ['grains', 'seafoods', 'tubers'];
        $products = Auth::user()->product()->paginate(20);

        // $dataUri1 = session('dataUri1');

        return view('products', compact('pageTitle', 'userStoreCheck', 'categories', 'products'));
    }

    public function add(Request $request)
    {
        $product = new Product([
            'store_id' => Auth::user()->userstore->id,
            'name' => $request->name,
            'price' => $request->price,
            'cuisine' => $request->cuisine,
            'category' => $request->category,
            'description' => $request->description,
            'measurement' => $request->measurement,
        ]);

        $mimeType1 = '';
        switch ($request->image1->getClientOriginalExtension()) {
            case 'png':
                $mimeType1 = 'image/png';
                break;
            case 'jpeg':
            case 'jpg':
                $mimeType1 = 'image/jpeg';
                break;
            case 'webp':
                $mimeType1 = 'image/webp';
                break;
        }

        // Handle image1
        if ($request->hasFile('image1')) {
            $image1Data = file_get_contents($request->image1);
            $product->image1 = base64_encode($image1Data);
        }

        $dataUri1 = "data:$mimeType1;base64,$product->image1";
        session(['dataUri1' => $dataUri1]);

        $mimeType2 = '';
        switch ($request->image1->getClientOriginalExtension()) {
            case 'png':
                $mimeType2 = 'image/png';
                break;
            case 'jpeg':
            case 'jpg':
                $mimeType2 = 'image/jpeg';
                break;
            case 'webp':
                $mimeType2 = 'image/webp';
                break;
        }
        
        // Handle image2 (similarly)
        if ($request->hasFile('image2')) {
            $image2Data = file_get_contents($request->image2);
            $product->image2 = base64_encode($image2Data);
        }

        $dataUri2 = "data:$mimeType2;base64,$product->image2";
        session(['dataUri2' => $dataUri2]);
        
        $product->save();

        return back()->with([
            'type' => 'success',
            'message' => "Product Added successfully",
            'dataUri1' => $dataUri1,
        ]);

        // return back()->with('success', "Product Added successfully");
    }