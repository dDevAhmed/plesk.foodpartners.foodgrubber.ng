///////////////////////////////////////////store logo and cover photo
<div class="row">
    <div class="col-lg-4 border">
        {{-- <img src="{{ asset('img/default_store_logo.jpg') }}" alt="user-avatar"
            class="d-block rounded" id="uploadedCover"/> --}}
        <div class="button-wrapper">
            <label for="upload" class="btn btn-primary me-2 mb-4" tabindex="0">
                {{-- <span class="d-none d-sm-block">Upload store logo</span> --}}
                <i class="bx bx-upload d-block"></i>
                <input type="file" id="upload" class="account-file-input" hidden
                    accept="image/png, image/jpeg" />
            </label>
            <button type="button" class="btn btn-outline-secondary account-image-reset mb-4">
                <i class="bx bx-reset d-block"></i>
                {{-- <span class="d-none d-sm-block">Reset</span> --}}
            </button>

            <p class="text-muted mb-0">Allowed JPG, GIF or PNG. Max size of 800K</p>
        </div>
    </div>
    <div class="col-lg-8">
        {{-- <img src="{{ asset('img/default_store_cover.jpg') }}" alt="user-avatar"
            class="d-block rounded" id="uploadedCover" /> --}}
        <div class="button-wrapper">
            <label for="upload" class="btn btn-primary me-2 mb-4" tabindex="0">
                {{-- <span class="d-none">Upload store cover</span> --}}
                <i class="bx bx-upload d-block"></i>
                <input type="file" id="upload" class="account-file-input" hidden
                    accept="image/png, image/jpeg" />
            </label>
            <button type="button" class="btn btn-outline-secondary account-image-reset mb-4">
                <i class="bx bx-reset d-block"></i>
                {{-- <span class="d-none d-sm-block">Reset</span> --}}
            </button>

            <p class="text-muted mb-0">Allowed JPG, GIF or PNG. Max size of 800K</p>
        </div>
    </div>
</div>
///////////////////////////////////////////store logo and cover photo


///////////////////////////////////////////Auth api function
public function signup(Request $request)
    {
        $fields = $request->validate([
            'name' => 'required|string',
            'email' => 'required|string|unique:users,email',
            'password' => 'required|string|confirmed'
        ]);
        $user = User::create([
            'name' => $fields['name'],
            'email' => $fields['email'],
            'password' => bcrypt($fields['password'])
        ]);
        event(new Registered($user));
        $token = $user->createToken('myapptoken')->plainTextToken;
        $Response = [
            'status' => 201,
            'user' => $user,
            'token' => $token,
            'Message' => 'Registration was successful. Check your email to verify'
        ];
        return response()->json($Response);
    }
    public function login(Request $request)
    {
        $fields = $request->validate([
            'email' => 'required|string',
            'password' => 'required|string'
        ]);

        $user = User::where('email', $fields['email'])->first();
        if (!$user || !Hash::check($fields['password'], $user->password)) {
            return response()->json([
                'status' => 401,
                'message' => 'Bad Credentials'
            ]);
        }

        $token = $user->createToken('myapptoken')->plainTextToken;
        $Response = [
            'status' => 201,
            'user' => $user,
            'token' => $token,
        ];
        return response()->json($Response);
    }
        public function logout(Request $request)
    {
        auth()->user()->tokens()->delete();
        $Response = [
            'status' => 201,
            'message' => 'Logged Out'
        ];
        return response()->json($Response);
    }
    public function forgot_password(Request $request)
    {
        //write a laravel controller that takes a email as the request and sends a password reset link to that email

        $request->validate(['email' => 'required|email']);

        $response = $this->broker()->sendResetLink(
            $request->only('email')
        );

        return $response == Password::RESET_LINK_SENT
            ? response()->json(['status' => 'success'], 200)
            : response()->json(['status' => 'failed'], 400);
    }
///////////////////////////////////////////Auth api function



///////////////////////////////////////////Email feature api function
public function resend(Request $request)
    {
        $request->user()->sendEmailVerificationNotification();
        return response()->json(['message' =>'verification email sent']);
    }

    public function verify(EmailVerificationRequest $request)
    {
        $request->fulfill();
        return response()->json(['message' =>'user verified successfully']);
    }

    public function check(){
        $user = Auth::user();

        if($user->hasVerifiedEmail()){
            return response()->json([
                'Success'=>true,
                'Message'=>'Email address is verified'
            ]);
        }
        else{
            return response()->json([
                'Success'=>false,
                'Message'=>'Email address is not verified'
            ]); 
        }
    }
///////////////////////////////////////////Email feature api function



///////////////////////////////////////////profile api function
public function index()
    {
        // $user = User::where('email', $fields['email'])->first();
        // if (!$user || !Hash::check($fields['password'], $user->password)) {
        //     return response()->json([
        //         'status' => 401,
        //         'message' => 'Bad Credentials'
        //     ]);
        // }

        // $Response = [
        //     'status' => 201,
        //     'user' => $user,
        //     // 'token' => $token,
        // ];
        return response()->json();
        // return Auth::user();
    }
    public function update(Request $request)
    {
        $user = Auth::user();
        $user->update([
            'phone' => $request->phone,
            'address' => $request->address,
            'city' => $request->city,
            // 'currentlocation' => $request->currentlocation,
            'state' => $request->state,
            'country' => $request->country,
            'postcode' => $request->postcode,
        ]);
        return response()->json([
            'user' => $user,
            'Message' => 'user details updated successfully'
        ]);
    }
    public function avatar(Request $request)
    {
        $request->validate([
            'avatar' => 'required|image',
        ]);

        $avatarName = time() . '.' . $request->avatar->getClientOriginalExtension();
        $request->avatar->move(public_path('avatars'), $avatarName);

        Auth::user()->update(['avatar' => $avatarName]);
        return response()->json([
            'avatar' => url('/avatars/' . Auth::user()->avatar),
            'Message' => 'Avatar Updated Successfully'
        ]);
    }
    public function getavatar()
    {
        return response()->json([
            'avatar' => url('/avatars/' . Auth::user()->avatar)
        ]);
    }
///////////////////////////////////////////profile api function



